/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.juvitec.probandojna;

import com.juvitec.probandojna.BiostarSDK.BSSDK;
import com.juvitec.probandojna.BiostarSDK.BSSDK.BESysInfoDataBLN;
import com.personal.utiles.FormularioUtil;
import com.sun.jna.ptr.IntByReference;
import entity.Equipo;
import java.awt.Component;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import org.bouncycastle.util.IPAddress;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;

/**
 *
 * @author RyuujiMD
 */
public class BuscadorEquipos extends javax.swing.JFrame {

    /**
     * Creates new form BuscadorEquipos
     */
    private final BSSDK sdk;
    private IntByReference numeroEquipos = new IntByReference(-1);
    private int[] equipoIds = new int[128];
    private int[] equipoTipos = new int[128];
    private int[] equipoDirecciones = new int[128];

    private List<Equipo> equipoList = ObservableCollections.observableList(new ArrayList<Equipo>());

    public BuscadorEquipos() {
        initComponents();
        inicializar();
        sdk = BSSDK.INSTANCE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        pnlBusqueda = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        chkLAN = new javax.swing.JCheckBox();
        chkUDP = new javax.swing.JCheckBox();
        txtIP = new javax.swing.JTextField();
        txtRango = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPuerto = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        pnlEquipos = new javax.swing.JPanel();
        pnlTabla = new javax.swing.JPanel();
        pbCargando = new javax.swing.JProgressBar();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlListado = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEquipo = new org.jdesktop.swingx.JXTable();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlInformacion = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtEquipoIP = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEquipoPuertaEnlace = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEquipoMascara = new javax.swing.JTextField();
        chkDHCP = new javax.swing.JCheckBox();
        chkServidor = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        txtEquipoPuerto = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtServidorIP = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtServidorPuerto = new javax.swing.JTextField();
        chkSincronizar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        pnlBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parámetros de búsqueda", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 12))); // NOI18N
        java.awt.GridBagLayout pnlBusquedaLayout = new java.awt.GridBagLayout();
        pnlBusquedaLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        pnlBusquedaLayout.rowHeights = new int[] {0, 5, 0};
        pnlBusqueda.setLayout(pnlBusquedaLayout);

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setText("~");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        pnlBusqueda.add(jLabel1, gridBagConstraints);

        chkLAN.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        chkLAN.setText("LAN");
        chkLAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLANActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        pnlBusqueda.add(chkLAN, gridBagConstraints);

        chkUDP.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        chkUDP.setText("UDP");
        chkUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        pnlBusqueda.add(chkUDP, gridBagConstraints);

        txtIP.setColumns(15);
        txtIP.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        pnlBusqueda.add(txtIP, gridBagConstraints);

        txtRango.setColumns(5);
        txtRango.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        pnlBusqueda.add(txtRango, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel2.setText("Puerto:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        pnlBusqueda.add(jLabel2, gridBagConstraints);

        txtPuerto.setColumns(5);
        txtPuerto.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        pnlBusqueda.add(txtPuerto, gridBagConstraints);

        btnBuscar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        pnlBusqueda.add(btnBuscar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(pnlBusqueda, gridBagConstraints);

        pnlEquipos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Equipos encontrados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 12))); // NOI18N
        java.awt.GridBagLayout pnlEquiposLayout = new java.awt.GridBagLayout();
        pnlEquiposLayout.columnWidths = new int[] {0};
        pnlEquiposLayout.rowHeights = new int[] {0, 5, 0};
        pnlEquipos.setLayout(pnlEquiposLayout);

        pnlTabla.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        pnlEquipos.add(pnlTabla, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 0.1;
        pnlEquipos.add(pbCargando, gridBagConstraints);

        jSplitPane1.setDividerLocation(320);

        java.awt.GridBagLayout pnlListadoLayout = new java.awt.GridBagLayout();
        pnlListadoLayout.columnWidths = new int[] {0};
        pnlListadoLayout.rowHeights = new int[] {0, 5, 0};
        pnlListado.setLayout(pnlListadoLayout);

        jScrollPane2.setViewportView(tblEquipo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        pnlListado.add(jScrollPane2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout());

        jButton1.setText("Ver información");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        pnlListado.add(jPanel2, gridBagConstraints);

        jSplitPane1.setLeftComponent(pnlListado);

        pnlInformacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración"));
        java.awt.GridBagLayout pnlInformacionLayout = new java.awt.GridBagLayout();
        pnlInformacionLayout.columnWidths = new int[] {0, 5, 0};
        pnlInformacionLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        pnlInformacion.setLayout(pnlInformacionLayout);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Direción IP:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(jLabel3, gridBagConstraints);

        txtEquipoIP.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtEquipoIP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        pnlInformacion.add(txtEquipoIP, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Puerta de enlace:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(jLabel4, gridBagConstraints);

        txtEquipoPuertaEnlace.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtEquipoPuertaEnlace.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        pnlInformacion.add(txtEquipoPuertaEnlace, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("Máscara de red:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(jLabel5, gridBagConstraints);

        txtEquipoMascara.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtEquipoMascara.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        pnlInformacion.add(txtEquipoMascara, gridBagConstraints);

        chkDHCP.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        chkDHCP.setText("DHCP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(chkDHCP, gridBagConstraints);

        chkServidor.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        chkServidor.setText("Servidor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(chkServidor, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Puerto:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(jLabel6, gridBagConstraints);

        txtEquipoPuerto.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtEquipoPuerto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        pnlInformacion.add(txtEquipoPuerto, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Dirección IP:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(jLabel7, gridBagConstraints);

        txtServidorIP.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtServidorIP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(txtServidorIP, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setText("Puerto:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(jLabel8, gridBagConstraints);

        txtServidorPuerto.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtServidorPuerto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(txtServidorPuerto, gridBagConstraints);

        chkSincronizar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        chkSincronizar.setText("Sincronizar hora con el servidor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlInformacion.add(chkSincronizar, gridBagConstraints);

        jScrollPane1.setViewportView(pnlInformacion);

        jSplitPane1.setRightComponent(jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        pnlEquipos.add(jSplitPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(pnlEquipos, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkLANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLANActionPerformed
        // TODO add your handling code here:
        checkbox();
    }//GEN-LAST:event_chkLANActionPerformed

    private void chkUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUDPActionPerformed
        // TODO add your handling code here:
        checkbox();
    }//GEN-LAST:event_chkUDPActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        int resultado;

        resultado = sdk.BS_InitSDK();
        this.equipoList.clear();

        if (resultado != BiostarSDK.BS_SUCCESS) {
            JOptionPane.showMessageDialog(this, "NO SE PUEDE INICIALIZAR");
        }

        if (resultado != BiostarSDK.BS_SUCCESS) {
            JOptionPane.showMessageDialog(this, "NO SE PUEDE ABRIR INTERNAL UDP");
        }
        if (chkLAN.isSelected()) {
            this.pbCargando.setIndeterminate(true);
            Thread hiloLAN = new Thread() {

                @Override
                public void run() {
                    int puerto = Integer.parseInt(txtPuerto.getText());
                    buscarEnLAN(txtIP.getText(), txtRango.getText(), puerto);
                }

            };

            hiloLAN.start();

        }

        if (chkUDP.isSelected()) {
            Thread hiloUDP = new Thread() {

                @Override
                public void run() {
                    buscarEnUDP();
                }

            };
            hiloUDP.start();

        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int fila = tblEquipo.getSelectedRow();
        if (fila != -1) {
            Equipo equipo = equipoList.get(fila);
            verInformacion(equipo);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuscadorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuscadorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuscadorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscadorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscadorEquipos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JCheckBox chkDHCP;
    private javax.swing.JCheckBox chkLAN;
    private javax.swing.JCheckBox chkServidor;
    private javax.swing.JCheckBox chkSincronizar;
    private javax.swing.JCheckBox chkUDP;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JProgressBar pbCargando;
    private javax.swing.JPanel pnlBusqueda;
    private javax.swing.JPanel pnlEquipos;
    private javax.swing.JPanel pnlInformacion;
    private javax.swing.JPanel pnlListado;
    private javax.swing.JPanel pnlTabla;
    private org.jdesktop.swingx.JXTable tblEquipo;
    private javax.swing.JTextField txtEquipoIP;
    private javax.swing.JTextField txtEquipoMascara;
    private javax.swing.JTextField txtEquipoPuertaEnlace;
    private javax.swing.JTextField txtEquipoPuerto;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtPuerto;
    private javax.swing.JTextField txtRango;
    private javax.swing.JTextField txtServidorIP;
    private javax.swing.JTextField txtServidorPuerto;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
//        this.pbCargando.setIndeterminate(true);
        checkbox();

        BindingGroup grupo = new BindingGroup();

        JTableBinding tablaBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ, equipoList, tblEquipo);

        BeanProperty pId = BeanProperty.create("id");
        BeanProperty pTipo = BeanProperty.create("tipo");
        BeanProperty pIp = BeanProperty.create("ip");
        BeanProperty pPuerto = BeanProperty.create("puerto");

        tablaBinding.addColumnBinding(pId).setColumnName("ID").setEditable(false);
        tablaBinding.addColumnBinding(pTipo).setColumnName("TIPO").setEditable(false);
        tablaBinding.addColumnBinding(pIp).setColumnName("IP").setEditable(false);
        tablaBinding.addColumnBinding(pPuerto).setColumnName("PUERTO").setEditable(false);

        grupo.addBinding(tablaBinding);
        grupo.bind();

        tblEquipo.getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value != null) {
                    int tipo = Integer.parseInt(value.toString());
                    value = getTipo(tipo);
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }

            private String getTipo(int tipo) {
                switch (tipo) {
                    case BiostarSDK.BS_DEVICE_BIOSTATION:
                        return "BioStation";
                    case BiostarSDK.BS_DEVICE_BEPLUS:
                        return "BioEntry Plus";
                    case BiostarSDK.BS_DEVICE_BIOLITE:
                        return "BioLite Net";
                    case BiostarSDK.BS_DEVICE_XPASS:
                        return "Xpass";
                    default:
                        return "";
                }
            }

        });
    }

    private void checkbox() {
        FormularioUtil.activarComponente(txtIP, chkLAN.isSelected());
        FormularioUtil.activarComponente(txtRango, chkLAN.isSelected());
        FormularioUtil.activarComponente(txtPuerto, chkLAN.isSelected());
        FormularioUtil.activarComponente(btnBuscar, chkLAN.isSelected() || chkUDP.isSelected());
    }

    private void buscarEnUDP() {
        IntByReference handle = new IntByReference();
        int resultado = sdk.BS_OpenInternalUDP(handle);
        if (resultado != BiostarSDK.BS_SUCCESS) {
            JOptionPane.showMessageDialog(this, "NO SE PUEDE ABRIR SOCKET UDP");
        }
        resultado = sdk.BS_SearchDeviceInLAN(handle.getValue(), numeroEquipos, equipoIds, equipoTipos, equipoDirecciones);
        if (resultado != BiostarSDK.BS_SUCCESS) {
            JOptionPane.showMessageDialog(this, "NO SE PUEDEN BUSCAR EQUIPOS EN UDP");
            return;
        }

        System.out.println("TOTAL EN UDP: " + numeroEquipos.getValue());
    }

    private void buscarEnLAN(String ipInicio, String rangoFin, int puerto) {
        IntByReference handle;
        StringTokenizer st = new StringTokenizer(ipInicio, ".");
        String rangoInicio = "";
        String ipBase = "";
        int contador = 0;
        int total = st.countTokens();
        while (st.hasMoreTokens()) {
            contador++;
            String token = st.nextToken();
            if (contador < total) {
                ipBase += token + ".";
            }
            rangoInicio = token;
        }

        ipBase = ipBase + "x";
        int nRangoInicio = Integer.parseInt(rangoInicio);
        int nRangoFin = Integer.parseInt(rangoFin);

        String ipAnalisis;
        int resultado;
        int totalLAN = 0;
        IntByReference tipoEquipo;
        IntByReference equipoId;
        for (int i = nRangoInicio; i <= nRangoFin; i++) {
            ipAnalisis = ipBase.replaceAll("x", i + "");
            handle = new IntByReference();

            resultado = sdk.BS_OpenSocket(ipAnalisis, puerto, handle);

            if (resultado == BiostarSDK.BS_SUCCESS) {
//                Equipo equipo = new Equipo();
                tipoEquipo = new IntByReference();
                equipoId = new IntByReference();
                System.out.println(String.format("IP: %s HANDLE: %s", ipAnalisis, handle.getValue()));

                sdk.BS_GetDeviceID(handle.getValue(), equipoId, tipoEquipo);

                Equipo equipo = new Equipo(equipoId.getValue(), tipoEquipo.getValue(), ipAnalisis, puerto);
                equipoList.add(equipo);

                sdk.BS_CloseSocket(handle.getValue());
                totalLAN++;
            } else {
                System.out.println(String.format("IP: %s HANDLE: %s ERROR: %s", ipAnalisis, handle.getValue(), resultado));
            }
        }

        this.pbCargando.setIndeterminate(false);

        System.out.println("TOTAL EN LAN: " + totalLAN);

//        txtTotalLAN.setText(totalLAN + "");
    }

    private void verInformacion(Equipo equipo) {
        IntByReference handle = new IntByReference();
        int resultado = sdk.BS_OpenSocket(equipo.getIp(), equipo.getPuerto(), handle);

        if (resultado != BiostarSDK.BS_SUCCESS) {
            System.out.println("ERROR AL ACCEDER AL EQUIPO");
            return;
        }

        resultado = sdk.BS_SetDeviceID(handle.getValue(), equipo.getId(), equipo.getTipo());

        if (resultado != BiostarSDK.BS_SUCCESS) {
            System.out.println("ERROR AL HACER SET DEVICE");
            return;
        }

        IntByReference size = new IntByReference();
        switch (equipo.getTipo()) {
            case BiostarSDK.BS_DEVICE_BIOLITE:
                BSSDK.BESysInfoDataBLN.ByReference BLNsysinfo = new BESysInfoDataBLN.ByReference();
                resultado = sdk.BS_ReadConfig(handle.getValue(), BiostarSDK.BLN_CONFIG_SYS_INFO, size, BLNsysinfo);

                if (resultado != BiostarSDK.BS_SUCCESS) {
                    System.out.println("HA OCURRIDO UN ERROR AL LEER");
                    return;
                }
                System.out.println("RESULTADO: " + BLNsysinfo.toString());

                BSSDK.BEConfigDataBLN.ByReference BLNconfigData = new BSSDK.BEConfigDataBLN.ByReference();
                resultado = sdk.BS_ReadConfig(handle.getValue(), BiostarSDK.BLN_CONFIG, size, BLNconfigData);

                txtEquipoIP.setText(equipo.getIp() + "");
                txtEquipoPuertaEnlace.setText(BLNconfigData.gateway + "");
                txtEquipoMascara.setText(BLNconfigData.subnetMask + "");
                txtEquipoPuerto.setText(BLNconfigData.port + "");
                txtServidorIP.setText(BLNconfigData.serverIpAddr + "");

                 {
                    try {
                        System.out.println("serverip: "+Inet4Address.getByName(BLNconfigData.serverIpAddr+"").getHostName());
                        InetAddress a = InetAddress.getByName(BLNconfigData.subnetMask + "");
                        System.out.println(a.getHostAddress());
                    } catch (UnknownHostException ex) {
                        Logger.getLogger(BuscadorEquipos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                sdk.BS_CloseSocket(handle.getValue());
        }
    }

    byte[] unpack(int bytes) {
        return new byte[]{
            (byte) ((bytes >>> 24) & 0xff),
            (byte) ((bytes >>> 16) & 0xff),
            (byte) ((bytes >>> 8) & 0xff),
            (byte) ((bytes) & 0xff)
        };
    }
}
